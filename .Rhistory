return(match_positions)
}
mapply(find_matches, hexamers, two_seq)
lapply(hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
})
lapply(hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
}) %>% as.data.frame(.)
lapply(hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches <- unlist(start(matches))
})
hexamers[3]
hexamers[1:3]
twenty_hexamers <- hexamers[1:20]
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches <- unlist(start(matches))
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches <- as.data.frame(unlist(start(matches)))
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- as.data.frame(unlist(start(matches)))
return(matches.df)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- rbind(unlist(start(matches)))
return(matches.df)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- cbind(unlist(start(matches)))
return(matches.df)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- as.data.frame(cbind(unlist(start(matches))))
return(matches.df)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- unlist(as.data.frame(cbind(unlist(start(matches)))))
return(matches.df)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- unlist(start(matches))))
matches.df <- unlist(start(matches)))
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- unlist(start(matches)))
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- unlist(start(matches))
return(matches.df)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- unlist(start(matches))
return(matches.df)
}) %>% unlist(.)
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- unlist(start(matches))
return(matches.df)
}) %>% unlist(.) %>% as.data.frame(.)
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.df <- unlist(start(matches))
return(matches.df)
})
matches.list<- lapply(matches.list, function(x){
data.frame(hexamer = name(matches.list), position = matches.list)
}
)
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
matches.list<- lapply(matches.list, function(x){
data.frame(hexamer = name(matches.list), position = matches.list)
})
return(matches.list)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
matches.list<- lapply(matches.list, function(x){
data.frame(hexamer = names(matches.list), position = matches.list)
})
return(matches.list)
})
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
#matches.list<- lapply(matches.list, function(x){
#  data.frame(hexamer = names(matches.list), position = matches.list)
#})
return(matches.list)
})
test1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
#matches.list<- lapply(matches.list, function(x){
#  data.frame(hexamer = names(matches.list), position = matches.list)
#})
return(matches.list)
})
test1$AAAAAA
data.frame(name = names(test1[1]), position = test1[1][1])
data.frame(name = names(test1[1]), position = test1[1][])
seq(1,1)
seq(1,2)
seq(1,4)
seq("A",4)
data.frame(name = rep(names(test1[1]), length(test[1])), position = test1)
data.frame(name = rep(names(test1[1]), length(test1[1])), position = test1)
rep(names(test1[1]), length(test1[1]))
data.frame(name = rep(names(test1[1]), length(test1[1])), position = test1[1])
test1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
matches.list <- lapply(matches.list, function(x){
data.frame(name = rep(names(x[1]), length(x[1])), position = x[1])
})
return(matches.list)
})
test1
is.na(test1)
test1[length(test1)>1]
test1[test1==-]
test1[test1==0]
lapply(test1, function(x){})
lapply(test1, function(x){})
lapply(test1, function(x){})
test1
test1
test1$AAAAAA
test1$TAAAAA
data.frame(name = rep(names(test1[2]), length(test1[2])), position = test1[2])
lst_filtered <- lapply(test1, function(x) x[x != 0])
lst_filtered$AAAAAA
lst_filtered$TAAAAA
remove_empty_integer_elements <- function(lst) {
lst_filtered <- lst[lengths(lst) > 0]
return(lst_filtered)
}
remove_empty_integer_elements(test1)
test2 <- remove_empty_integer_elements(test1)
test2$GAAAAA
test1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
matches.list <- remove_empty_integer_elements(matches.list)
matches.list <- lapply(matches.list, function(x){
data.frame(name = rep(names(x[1]), length(x[1])), position = x[1])
})
return(matches.list)
})
test1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
})
test1
test1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
}) %>% lapply(., function(x){
m1 <- remove_empty_integer_elements(x)
matches.list <- lapply(m1, function(x){
data.frame(name = rep(names(x[1]), length(x[1])), position = x[1])
})
return(matches.list)
})
test1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
}) %>% lapply(., function(x){
m1 <- remove_empty_integer_elements(x)
return(m1)
})
test1
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
}) %>% lapply(., function(x){
m1 <- remove_empty_integer_elements(x)
return(m1)
})
remove_empty_integer_elements()
?remove_empty_integer_elements()
remove_empty_integer_elements()
lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
}) %>% lapply(., function(x){
m1 <- x[lengths(x) > 0]
return(m1)
})
t1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
})
lapply(t1, function(x){
m1 <- x[lengths(x) > 0]
return(m1)
})
filtered_list <- lapply(t1, function(x) {
if (!identical(x, integer(0))) {
return(x)
}
})
# Remove NULL entries
filtered_list <- filtered_list[!sapply(filtered_list, is.null)]
filtered_list
matches.list <- lapply(filtered_list, function(x){
data.frame(name = rep(names(x[1]), length(x[1])), position = x[1])
})
filtered_list
df <- do.call(rbind, lapply(names(filtered_list), function(hexamer) {
data.frame(Hexamer = rep(hexamer, length(filtered_list[[hexamer]])),
Position = filtered_list[[hexamer]])
}))
df
#chat gpt
positions_list <- lapply(twenty_hexamers, function(hexamer) {
matches <- vmatchPattern(hexamer, one.seq)
matches.list <- unlist(start(matches))
if (!identical(matches.list, integer(0))) {
return(matches.list)
} else {
return(NULL)
}
})
# Convert the list to a data frame
df <- do.call(rbind, lapply(seq_along(twenty_hexamers), function(i) {
hexamer <- twenty_hexamers[i]
positions <- positions_list[[i]]
if (!is.null(positions)) {
data.frame(Hexamer = rep(hexamer, length(positions)), Position = positions)
}
}))
# Find positions for each hexamer in one.seq
positions_list <- lapply(twenty_hexamers, function(hexamer) {
matches <- vmatchPattern(hexamer, one.seq)
matches.list <- unlist(start(matches))
if (!identical(matches.list, integer(0))) {
return(matches.list)
} else {
return(NULL)
}
})
# Combine the data into a single data frame
df <- data.frame(Hexamer = character(0), Position = integer(0))
for (i in seq_along(twenty_hexamers)) {
hexamer <- twenty_hexamers[i]
positions <- positions_list[[i]]
if (!is.null(positions)) {
df <- rbind(df, data.frame(Hexamer = rep(hexamer, length(positions)), Position = positions))
}
}
df
twenty_hexamers <- hexamers[1:20]
t1 <- lapply(twenty_hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
})
filtered_list <- lapply(t1, function(x) {
if (!identical(x, integer(0))) {
return(x)
}
})
# Remove NULL entries
filtered_list <- filtered_list[!sapply(filtered_list, is.null)]
df <- do.call(rbind, lapply(names(filtered_list), function(hexamer) {
data.frame(Hexamer = rep(hexamer, length(filtered_list[[hexamer]])),
Position = filtered_list[[hexamer]])
}))
df
t1 <- lapply(hexamers, function(x){
matches <- vmatchPattern(x, one.seq)
matches.list <- unlist(start(matches))
return(matches.list)
})
filtered_list <- lapply(t1, function(x) {
if (!identical(x, integer(0))) {
return(x)
}
})
# Remove NULL entries
filtered_list <- filtered_list[!sapply(filtered_list, is.null)]
df <- do.call(rbind, lapply(names(filtered_list), function(hexamer) {
data.frame(Hexamer = rep(hexamer, length(filtered_list[[hexamer]])),
Position = filtered_list[[hexamer]])
}))
df
df %>% arrange(position)
df %>% head(.)
df %>% arrange(Position) %>% head(.)
df %>% arrange(desc(Position)) %>% head(.)
one.seq
length(hexamers)
one.seq[429:434]
one.seq[429:433]
one.seq[c(429,433)]
last_nucleotides <- substring(one.seq, nchar(one.seq) - 9)
last_nucleotides
nrow(df)
length(one.seq)
width(one.seq)
434-429
429/6
434/6
table(df$Hexamer)
length(table(df$Hexamer))
# get hexamers per seq
get_hexamers_per_seq <- function(data){
t1 <- lapply(hexamers, function(x){
matches <- vmatchPattern(x, data)
matches.list <- unlist(start(matches))
return(matches.list)
})
filtered_list <- lapply(t1, function(x) {
if (!identical(x, integer(0))) {
return(x)
}
})
# Remove NULL entries
filtered_list <- filtered_list[!sapply(filtered_list, is.null)]
df <- do.call(rbind, lapply(names(filtered_list), function(hexamer) {
data.frame(Hexamer = rep(hexamer, length(filtered_list[[hexamer]])),
Position = filtered_list[[hexamer]])
}))
}
two_seq
DNAStringSetList(two_seq)
d1 <- list(one.seq, one.seq)
d1
lapply(d1, get_hexamers_per_seq)
# get hexamers per seq
get_hexamers_per_seq <- function(data){
t1 <- lapply(hexamers, function(x){
matches <- vmatchPattern(x, data)
matches.list <- unlist(start(matches))
return(matches.list)
})
filtered_list <- lapply(t1, function(x) {
if (!identical(x, integer(0))) {
return(x)
}
})
# Remove NULL entries
filtered_list <- filtered_list[!sapply(filtered_list, is.null)]
df <- do.call(rbind, lapply(names(filtered_list), function(hexamer) {
data.frame(Hexamer = rep(hexamer, length(filtered_list[[hexamer]])),
Position = filtered_list[[hexamer]])
}))
return(df)
}
df2 <- lapply(d1, get_hexamers_per_seq)
df
df2
two_seq
get_hexamers_per_seq(two_seq)
two_seq
test 1 <- get_hexamers_per_seq(two_seq)
test.dat  <- get_hexamers_per_seq(two_seq)
test.dat
test.dat %>% group_by(Position, Hexamer ) %>% tally()
# take 20 just for test
subset_utr <- head(annot,100)
# take only 20 nt upstream
make_single_nt <- function(x, upstream.nt){
upstream.nt <- upstream.nt-1
pos <- x[x@strand=="+"]
start(pos) <- end(pos) - upstream.nt
neg <- x[x@strand=="-"]
end(neg) <- start(neg) + upstream.nt
single_nt_ends <- c(pos,neg)
return(single_nt_ends)
}
utr.10nt_window <- make_single_nt(subset_utr, 10)
utr.10nt_window
width(utr.10nt_window)
# change chromosome names to match genome sequence
seqlevelsStyle( subset_utr ) <-  "UCSC"
# get sequence
seq.utr <- BSgenome::getSeq( BSgenome.Dmelanogaster.UCSC.dm6, subset_utr)
utr.10nt_window <- make_single_nt(subset_utr, 11)
# change chromosome names to match genome sequence
seqlevelsStyle( subset_utr ) <-  "UCSC"
# get sequence
seq.utr <- BSgenome::getSeq( BSgenome.Dmelanogaster.UCSC.dm6, subset_utr)
# Define the DNA nucleotides
nucleotides <- c("A", "T", "C", "G")
# Create all possible combinations of hexamers
hexamer_combinations <- expand.grid(nucleotides,
nucleotides,
nucleotides,
nucleotides,
nucleotides,
nucleotides,
stringsAsFactors = FALSE)
# Combine the columns to get the hexamers
hexamers <- as.list(apply(hexamer_combinations, 1, paste0, collapse = ""))
names(hexamers) <- apply(hexamer_combinations, 1, paste0, collapse = "")
seq.utr
# change chromosome names to match genome sequence
seqlevelsStyle( utr.10nt_window ) <-  "UCSC"
# get sequence
seq.utr <- BSgenome::getSeq( BSgenome.Dmelanogaster.UCSC.dm6, utr.10nt_window)
seq.utr
utr.10nt_window <- make_single_nt(subset_utr, 21)
# change chromosome names to match genome sequence
seqlevelsStyle( utr.10nt_window ) <-  "UCSC"
# get sequence
seq.utr <- BSgenome::getSeq( BSgenome.Dmelanogaster.UCSC.dm6, utr.10nt_window)
test.dat  <- get_hexamers_per_seq(seq.utr)
test.dat2 <- get_hexamers_per_seq2(seq.utr)
get_hexamers_per_seq2 <- function(data) {
# Create an empty data frame to store results
result_df <- data.frame(Hexamer = character(0), Position = integer(0))
for (hexamer in hexamers) {
matches <- vmatchPattern(hexamer, data)
matches_list <- start(matches)
if (length(matches_list) > 0) {
result_df <- rbind(result_df, data.frame(Hexamer = rep(hexamer, length(matches_list)), Position = matches_list))
}
}
return(result_df)
}
test.dat2 <- get_hexamers_per_seq2(seq.utr)
get_hexamers_per_seq <- function(data) {
result_list <- Map(function(hexamer) {
matches <- vmatchPattern(hexamer, data)
matches_list <- start(matches)
if (length(matches_list) > 0) {
data.frame(Hexamer = rep(hexamer, length(matches_list)), Position = matches_list)
} else {
NULL
}
}, hexamers)
# Filter out NULL entries
result_list <- Filter(function(x) !is.null(x), result_list)
# Combine the list of data frames into a single data frame
result_df <- do.call(rbind, result_list)
return(result_df)
}
test.dat2 <- get_hexamers_per_seq(seq.utr)
get_hexamers_per_seq2 <- function(data) {
result_list <- Map(function(hexamer) {
matches <- vmatchPattern(hexamer, data)
matches_list <- start(matches)
if (length(matches_list) > 0) {
data.frame(Hexamer = rep(hexamer, length(matches_list)), Position = matches_list)
} else {
NULL
}
}, hexamers)
# Filter out NULL entries
result_list <- Filter(function(x) !is.null(x), result_list)
# Combine the list of data frames into a single data frame
result_df <- do.call(rbind, result_list)
return(result_df)
}
test.dat2 <- get_hexamers_per_seq2(seq.utr)
get_hexamers_per_seq_optimized <- function(data){
# Assuming 'hexamers' is a global variable or needs to be passed as an argument
matches_list <- lapply(hexamers, function(x) {
matches <- vmatchPattern(x, data)
unlist(start(matches))
})
# Remove hexamers not found in the sequence and null entries
non_empty_indices <- sapply(matches_list, function(x) !identical(x, integer(0)))
matches_list <- matches_list[non_empty_indices]
hexamer_names <- hexamers[non_empty_indices]
# Create dataframe using data.table for faster rbind
dfs <- lapply(seq_along(matches_list), function(i) {
data.table(Hexamer = hexamer_names[i], Position = matches_list[[i]])
})
df <- rbindlist(dfs)
return(df)
}
tt2 <- get_hexamers_per_seq_optimized(seq.utr)
require(data.table)
tt2 <- get_hexamers_per_seq_optimized(seq.utr)
tt2
tt2
tt2 %>% arrange(Position)
tt2 %>% group_by(Hexamer, Position)
tt2 %>% group_by(Hexamer, Position) %>% tally()
tt2
typeof(tt2)
as.data.frame(tt2)
as.data.frame(tt2) %>% group_by(Position, Hexamer) %>% tally()
typeof(as.data.frame(tt2))
tt2$Hexamer
tt2$Position
test.dat
test.dat %>% group_by(Hexamer, Position)
test.dat %>% group_by(Hexamer, Position) %>% tally()
